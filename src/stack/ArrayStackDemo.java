package stack;

import java.util.Scanner;

public class ArrayStackDemo {

	public static void main(String[] args) {
		// 测试ArrayStack是否正确
		ArrayStack stack = new ArrayStack(4);
		String key ="";
		boolean loop= true;
		Scanner scanner = new Scanner(System.in);
		
		while(loop) {
			System.out.println("show:表示显示栈");
			System.out.println("exit:退出程序");
			System.out.println("push:表示将数据压入栈");
			System.out.println("pop:表示从栈取出数据");
			System.out.println("请输入选择");
			key = scanner.next();
			
			switch(key) {
			case"show":
				stack.show();
				break;
			case"exit":       //完成一系列关闭操作
				scanner.close();
				loop = false;
				break;
			case "push":
				System.out.println("请输入要压入栈的数据：");
				int value = scanner.nextInt();
				stack.push(value);
				break;
			case"pop":
				try {
					int res = stack.pop();
					System.out.printf("出栈的数据为%d \n", res);
					} catch (Exception e) {
					// TODO: handle exception
						System.out.println(e.getMessage());
				}
				break;
			default:
				break;
			}
		}
		System.out.println("程序退出！");

	}

}

// 定义一个类，表示栈
class ArrayStack {
	private int maxSize; // 栈的大小
	private int[] stack; // 数组模拟栈
	private int top = -1; // 栈顶，初始化为-1

	// 构造器
	public ArrayStack(int maxSize) {
		this.maxSize = maxSize;
		stack = new int[this.maxSize]; // 构造栈完成
	}

	// 栈满
	public boolean isFull() {
		return top == maxSize - 1;
	}

	// 栈空
	public boolean isEmpty() {
		return top == -1;
	}

	// 入栈
	public void push(int value) {
		// 先判断是否栈满
		if (isFull()) {
			System.out.println("----------栈满----------");
			return;
		}
		top++;
		stack[top] = value;
	}

	// 出栈
	public int pop() {
		// 先判断栈是否空
		if (isEmpty()) {
			// 抛出异常
			throw new RuntimeException("----------栈空----------");
		}
		// 将栈顶的值保存一下
		int value = stack[top];
		top--;
		return value;
	}

	// 遍历栈
	// 需要从栈顶开始显示数据
	public void show() {
		if (isEmpty()) {
			System.out.println("----------栈空----------");
		}
		for (int i = top; i >= 0; i--) {
			System.out.printf("stack[%d]=%d \n", i,stack[i]);
		}
	}
}